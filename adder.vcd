$date
	Sun Sep 25 01:26:45 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testFullAdder $end
$var wire 1 ! carryout $end
$var wire 1 " overflow $end
$var wire 4 # sum [3:0] $end
$var reg 4 $ a [3:0] $end
$var reg 4 % b [3:0] $end
$scope module adder4bit $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 ! carryout $end
$var wire 1 " overflow $end
$var wire 4 ( sum [3:0] $end
$scope module adder0 $end
$var wire 1 ) And_AB $end
$var wire 1 * And_XorAB_C $end
$var wire 1 + Xor_AB $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . carryin $end
$var wire 1 ! carryout $end
$var wire 1 / sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 0 And_AB $end
$var wire 1 1 And_XorAB_C $end
$var wire 1 2 Xor_AB $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 ! carryin $end
$var wire 1 ! carryout $end
$var wire 1 5 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 6 And_AB $end
$var wire 1 7 And_XorAB_C $end
$var wire 1 8 Xor_AB $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ! carryin $end
$var wire 1 ! carryout $end
$var wire 1 ; sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 < And_AB $end
$var wire 1 = And_XorAB_C $end
$var wire 1 > Xor_AB $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 ! carryin $end
$var wire 1 " carryout $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xA
1@
1?
z>
x=
z<
x;
0:
09
z8
x7
z6
x5
04
03
z2
x1
z0
x/
0.
0-
0,
z+
z*
z)
bx (
b1000 '
b1000 &
b1000 %
b1000 $
bx #
x"
x!
$end
#50000
1<
0>
06
08
00
02
0*
0)
0+
#100000
1"
0=
07
01
0/
bx0 #
bx0 (
#150000
0!
#200000
05
0;
0A
b0 #
b0 (
#1000000
1-
1:
1,
19
b1101 %
b1101 '
b1101 $
b1101 &
#1050000
1)
16
#1100000
x!
#1150000
x5
x;
xA
bx0 #
bx0 (
#2000000
