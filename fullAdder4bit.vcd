$date
	Mon Sep 26 11:54:00 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module behavioralFullAdder $end
$var wire 1 ! a $end
$var wire 1 " b $end
$var wire 1 # carryin $end
$var wire 1 $ sum $end
$var wire 1 % carryout $end
$upscope $end
$scope module testAdder4bit $end
$var wire 4 & sum [3:0] $end
$var wire 1 ' overflow $end
$var wire 1 ( carryout $end
$var reg 4 ) a [3:0] $end
$var reg 4 * b [3:0] $end
$scope module dut $end
$var wire 4 + a [3:0] $end
$var wire 4 , b [3:0] $end
$var wire 1 ' overflow $end
$var wire 4 - sum [3:0] $end
$var wire 3 . internalCarryouts [2:0] $end
$var wire 1 ( carryout $end
$scope module adder0 $end
$var wire 1 / a $end
$var wire 1 0 abCinXor $end
$var wire 1 1 abSum $end
$var wire 1 2 abXor $end
$var wire 1 3 b $end
$var wire 1 4 carryin $end
$var wire 1 5 carryout $end
$var wire 1 6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 7 a $end
$var wire 1 8 abCinXor $end
$var wire 1 9 abSum $end
$var wire 1 : abXor $end
$var wire 1 ; b $end
$var wire 1 < carryin $end
$var wire 1 = carryout $end
$var wire 1 > sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ? a $end
$var wire 1 @ abCinXor $end
$var wire 1 A abSum $end
$var wire 1 B abXor $end
$var wire 1 C b $end
$var wire 1 D carryin $end
$var wire 1 E carryout $end
$var wire 1 F sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 G a $end
$var wire 1 H abCinXor $end
$var wire 1 I abSum $end
$var wire 1 J abXor $end
$var wire 1 K b $end
$var wire 1 L carryin $end
$var wire 1 ( carryout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xM
xL
0K
xJ
xI
xH
0G
xF
xE
xD
0C
xB
xA
x@
1?
x>
x=
x<
1;
x:
x9
x8
07
x6
x5
04
03
x2
x1
x0
0/
bx .
bx -
b10 ,
b100 +
b10 *
b100 )
x(
x'
bx &
x%
x$
z#
z"
z!
$end
#50
01
02
09
1:
0A
1B
0I
0J
00
#100
0<
bx0 &
bx0 -
06
0H
bx0 .
05
#150
08
bx10 &
bx10 -
1>
0(
#200
0D
bx00 .
0=
#250
0@
bx110 &
bx110 -
1F
#300
0L
b0 .
0E
#350
b110 &
b110 -
0M
#400
0'
#1000
1K
13
b1011 *
b1011 ,
#1050
1J
12
#1100
1M
b1111 &
b1111 -
16
#1150
1'
#2000
1C
0;
03
17
1/
b1100 *
b1100 ,
b111 )
b111 +
#2050
1A
0B
#2100
1L
b100 .
1E
b1011 &
b1011 -
0F
#2150
1H
b11 &
b11 -
0M
#2200
0'
1(
#2250
1'
#3000
1;
13
1G
07
b1111 *
b1111 ,
b1101 )
b1101 +
#3050
11
02
1I
0J
#3100
1<
b101 .
15
06
0H
b1010 &
b1010 -
1M
#3150
18
b1000 &
b1000 -
0>
0'
#3200
1D
b111 .
1=
#3250
b1100 &
b1100 -
1F
#4000
0K
0C
03
0?
17
0/
b10 *
b10 ,
b1010 )
b1010 +
#4050
0I
1J
0A
19
0:
01
#4100
0L
0<
0(
1H
0M
0E
08
b110 &
b110 -
1>
b10 .
05
#4150
0H
1M
b1100 &
b1100 -
0>
1(
#4200
0(
#4250
1'
#5000
1C
13
0G
07
1/
b111 *
b111 ,
b1 )
b1 +
#5050
1B
0J
09
1:
11
#5100
0D
1<
1@
0F
0M
0=
b10 &
b10 -
1>
b1 .
15
#5150
1L
0'
0@
1F
18
b100 &
b100 -
0>
b101 .
1E
#5200
0L
1D
b1100 &
b1100 -
1M
0E
b11 .
1=
#5250
1'
0M
1@
b0 &
b0 -
0F
#5300
1L
0'
b111 .
1E
#5350
b1000 &
b1000 -
1M
#5400
1'
#6000
